@page "/thread/{threadId}"
@using System.Text.Json
@using BlueBirdDX.Common.Account
@using BlueBirdDX.WebApp.Services
@using MongoDB.Driver
@inject DatabaseService Database
@model ThreadEditModel
@{
    ViewData["Title"] = "Edit Thread";
}

<style scoped>
    .thread-item-character-counter {
        font-family: monospace;
    }
</style>

<h2>Edit Thread</h2>

<div class="d-grid gap-3 w-50">
    <div>
        <label for="nameInput" class="form-label">Name</label>
        <input id="nameInput" class="form-control" type="text">
    </div>
    <div>
        <select id="groupSelect" class="form-select">
            @foreach (AccountGroup group in Database.AccountGroupCollection.AsQueryable())
            {
                <option value="@group._id.ToString()">@group.Name</option>
            }
        </select>
    </div>
    <label class="form-label mb-0">State</label>
    <div>
        <div class="form-check form-check-inline">
            <input id="stateRadioDraft" class="form-check-input" type="radio" name="stateRadio" value="0">
            <label class="form-check-label" for="stateRadioDraft">Draft</label>
        </div>
        <div class="form-check form-check-inline">
            <input id="stateRadioEnqueued" class="form-check-input" type="radio" name="stateRadio" value="1">
            <label class="form-check-label" for="stateRadioEnqueued">Enqueued</label>
        </div>
    </div>
    <div id="timeContainer" class="d-none">
        <label for="timeInput" class="form-label">Scheduled Time</label>
        <div class="input-group">
            <input id="timeInput" class="form-control" type="datetime-local"/>
            <button id="timeNowButton" class="btn btn-outline-secondary" type="button">Now</button>
        </div>
    </div>
    <div id="postsContainer" class="d-grid gap-3"></div>
    <button id="addPostButton" class="btn btn-secondary">Add Post</button>
</div>

<div class="text-end w-50 mt-3">
    <button id="saveButton" class="btn btn-primary">Save</button>
</div>

<!-- Templates -->
<div class="d-none">
    <div id="threadItemTemplate">
        <div class="input-group mb-3">
            <textarea class="form-control thread-item-textarea" rows="4"></textarea>
            <span class="input-group-text thread-item-character-counter">0</span>
            <button class="btn btn-outline-secondary thread-item-attach-button" type="button">üìéÔ∏è</button>
            <button class="btn btn-outline-secondary thread-item-delete-button" type="button">üóëÔ∏è</button>
        </div>
        <div class="attachments">
        </div>
    </div>
</div>

<!-- Attach modal -->
<div id="attach-modal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Attach</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="attachTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="media-tab" data-bs-toggle="tab" data-bs-target="#media-tab-pane" type="button" role="tab">Media</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="post-tab" data-bs-toggle="tab" data-bs-target="#post-tab-pane" type="button" role="tab">Post</button>
                    </li>
                </ul>
                
                <div class="tab-content" id="attachTabsContent">
                    <div class="tab-pane fade show active" id="media-tab-pane" role="tabpanel" tabindex="0">
                        <select id="mediaSelect" class="form-select mt-3 mb-3">
                        </select>
                        <button id="attachMediaButton" class="btn btn-primary">Save</button>
                    </div>
                    <div class="tab-pane fade" id="post-tab-pane" role="tabpanel" tabindex="0">
                        <label for="postUrlInput" class="form-label mt-3">URL</label>
                        <input id="postUrlInput" class="form-control mb-3" type="text">
                        <button id="attachPostButton" class="btn btn-primary">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Error modal -->
<div id="error-modal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
            </div>
            <div class="modal-body">
                <p id="error-element">An error occurred.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/twitter-text/dist/twitter-text-3.1.0.bundle.js"></script>
    <script src="~/lib/luxon/dist/luxon.min.js"></script>

    <script>
        let currentThread = @Html.Raw(JsonSerializer.Serialize(Model.ApiThread));
        let currentThreadId = "@Model.ApiThreadId";
        
        let mediaNameCache = @Html.Raw(JsonSerializer.Serialize(Model.MediaNameCache));
        let currentAttachEditItemIdx = -1;
        
        function updateCharacterCounter(characterCounterSpan, text) {
            const twitterOutput = twitter.parseTweet(text);
            
            characterCounterSpan.text(String(twitterOutput.weightedLength).padStart(3, '0'));
            
            if (twitterOutput.valid) {
                characterCounterSpan.removeClass("text-danger");
            } else {
                characterCounterSpan.addClass("text-danger");
            }
        }
        
        function checkDidReachAttachmentLimit(item) {
            let attachmentCount = 0;
            
            attachmentCount += item.attached_media.length;
            
            if (item.quoted_post != null) {
                attachmentCount += 1;
            }
            
            return attachmentCount >= 4;
        }
        
        function rebuildPostsContainer() {
            const container = $("#postsContainer");
            
            container.empty();
            container.append("<label>Posts</label>");
            
            for (let i = 0; i < currentThread.items.length; i++) {
                const item = currentThread.items[i];
                
                const clone = $("#threadItemTemplate").clone(true, true);
                clone.removeAttr("id");
                clone.attr("data-thread-item-idx", i);
                
                const inputGroup = clone.children(".input-group");
                
                inputGroup.children("textarea").val(item.text);
                
                updateCharacterCounter(inputGroup.children(".thread-item-character-counter"), item.text);
                
                const attachments = clone.children(".attachments");
                
                if (item.quoted_post !== null) {
                    attachments.append("<p class=\"mb-0\">üí¨ " + item.quoted_post + " <a href=\"#\" class=\"post-attachment-remove\">(remove)</a></p>");
                }
                
                for (const i in item.attached_media) {
                    const mediaId = item.attached_media[i];
                    attachments.append("<p class=\"mb-0\">üì∑ " + mediaNameCache[mediaId] + " <a href=\"#\" class=\"media-attachment-remove\" data-media-idx=\"" + i + "\">(remove)</a></p>");
                }
                
                clone.appendTo(container);
            }
        }
        
        function handleAjaxDone(data) {
            let date = new Date();
            date.setFullYear(date.getFullYear() + 2);
            
            document.cookie = "index-current-group=" + currentThread.target_group + "; path=/; expires=" +  date.toUTCString() + "; samesite=strict";
                            
            window.location = "/";
        }
        
        function handleAjaxFail(xhr, textStatus, error) {
            let errorObj;
            
            try {
                errorObj = JSON.parse(xhr.responseText);
                
                let errorMessage;
                
                if ("detail" in errorObj) {
                    // We prefer our detailed error message if possible
                    errorMessage = errorObj["detail"];
                } else {
                    // Fallback, hopefully this exists
                    errorMessage = errorObj["title"];
                }
                
                $("#error-element").text(errorMessage);
            } catch (e) {
                $("#error-element").text("An error occurred. Additionally, another error occurred while attempting to parse the server response.");
            }
            
            $("#error-modal").modal("show");
        }
        
        $(function () {
            $("#nameInput").on("input", function () {
                currentThread.name = $(this).val();
            })
            
            $("#groupSelect").change(function () {
                currentThread.target_group = $(this).val();
            });
            
            $("input[type=radio]").change(function () {
                const val = Number($(this).val());
                
                currentThread.state = val;
                
                if (val === 0) {
                    $("#timeContainer").addClass("d-none");
                } else {
                    $("#timeContainer").removeClass("d-none");
                }
            })
            
            $("#timeInput").change(function () {
                // convert to UTC, then to a proper ISO 8601 string
                currentThread.scheduled_time = luxon.DateTime.fromISO($(this).val()).toUTC().toISO();
            });
            
            $("#timeNowButton").click(function () {
                const now = luxon.DateTime.now();
                const nowStripped = luxon.DateTime.local(now.year, now.month, now.day, now.hour, now.minute, 0);
                
                $("#timeInput").val(nowStripped.toISO({
                    suppressSeconds: true,
                    suppressMilliseconds: true,
                    includeOffset: false
                }));
                
                currentThread.scheduled_time = nowStripped.toUTC().toISO();
            });
            
            $(".thread-item-textarea").on("input", function () {
                const parent = $(this).parent().parent();
                const idx = parent.attr("data-thread-item-idx");
                const item = currentThread.items[idx];
                const text = $(this).val();
                
                item.text = text;
                
                updateCharacterCounter($(this).parent().children(".thread-item-character-counter"), text);
            });
            
            $(".thread-item-attach-button").click(function () {
                currentAttachEditItemIdx = $(this).parent().parent().attr("data-thread-item-idx");
                
                const item = currentThread.items[currentAttachEditItemIdx];
                
                let attachmentCount = 0;
                
                attachmentCount += item.attached_media.length;
                
                if (item.quoted_post != null) {
                    attachmentCount += 1;
                }
                
                if (attachmentCount >= 4) {
                    $("#error-element").text("Can't exceed attached media limit.");
                    $("#error-modal").modal("show");
                    
                    return;
                }
                
                $.ajax({
                    method: "GET",
                    url: "/api/v1/media",
                }).done(function (results) {
                    mediaNameCache = {};
                    
                    const select = $("#mediaSelect");
                    
                    select.empty();
                    
                    for (const media of results) {
                        mediaNameCache[media.id] = media.name;
                        
                        select.append("<option value=\"" + media.id + "\">" + media.name + "</option>");
                    }
                    
                    $("#attach-modal").modal("show");
                }).fail(function () {
                    $("#error-element").text("Failed to fetch list of media.");
                    $("#error-modal").modal("show");
                });
            });
            
            $(".thread-item-delete-button").click(function () {
                if (currentThread.items.length === 1) {
                    $("#error-element").text("Can't remove last post in thread.");
                    $("#error-modal").modal("show");
                    
                    return;
                }
                
                const idx = $(this).parent().parent().attr("data-thread-item-idx");

                currentThread.items.splice(idx, 1);
                
                rebuildPostsContainer();
            });
            
            $(".attachments").on("click", "a.media-attachment-remove", function () {
                const itemIdx = $(this).parent().parent().parent().attr("data-thread-item-idx");
                const mediaIdx = $(this).attr("data-media-idx");
                
                console.log($(this).parent());
                
                currentThread.items[itemIdx].attached_media.splice(mediaIdx, 1);
                
                rebuildPostsContainer();
            });
            
            $(".attachments").on("click", "a.post-attachment-remove", function () {
                const itemIdx = $(this).parent().parent().parent().attr("data-thread-item-idx");
                
                currentThread.items[itemIdx].quoted_post = null;
                
                rebuildPostsContainer();
            });
            
            $("#addPostButton").click(function () {
                currentThread.items.push({
                    text: "",
                    attached_media: [],
                    quoted_post: null
                });
                
                rebuildPostsContainer();
            });
            
            $("#attachMediaButton").click(function () {
                const selectedItem = $("#mediaSelect").find(":selected").val();
                currentThread.items[currentAttachEditItemIdx].attached_media.push(selectedItem);
                
                $("#attach-modal").modal("hide");
                
                rebuildPostsContainer();
            });
            
            $("#attachPostButton").click(function() {
                currentThread.items[currentAttachEditItemIdx].quoted_post = $("#postUrlInput").val();
                
                $("#attach-modal").modal("hide");
                
                rebuildPostsContainer();
            });
            
            $("#nameInput").val(currentThread.name);
            
            if (currentThread.target_group !== "000000000000000000000000") {
                $("#groupSelect option").each(function () {
                    if (currentThread.target_group === $(this).val()) {
                        $(this).attr("selected", "selected");
                    }
                });
            } else {
                // Correct default value to the first group in the dropdown
                $("#groupSelect").children(":first").attr("selected", "selected");
                currentThread.target_group = $('#groupSelect').find(":selected").val();
            }
            
            let stateSelector;
            
            if (currentThread.state === 0) {
                stateSelector = "#stateRadioDraft";                
            } else {
                stateSelector = "#stateRadioEnqueued";
                
                $("#timeContainer").removeClass("d-none");
            }
            
            const scheduledTime = luxon.DateTime.fromISO(currentThread.scheduled_time);
            $("#timeInput").val(scheduledTime.toISO({
                includeOffset: false
            }));
            
            $(stateSelector).prop("checked", true);
            
            $("#saveButton").click(function () {
                const json = JSON.stringify(currentThread);
                
                let method;
                let url = "/api/v1/thread";
                
                if (currentThreadId !== "new") {
                    method = "PUT";
                    url += "/" + currentThreadId;
                } else {
                    method = "POST";
                }
                
                $.ajax({
                    method: method,
                    url: url,
                    data: JSON.stringify(currentThread),
                    contentType: "application/json"
                }).done(handleAjaxDone).fail(handleAjaxFail);
            });
            
            rebuildPostsContainer();
        });
    </script>
}
